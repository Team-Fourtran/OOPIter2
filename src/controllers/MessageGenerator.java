package controllers;

import models.playerAsset.Iterators.AssetIterator;
import models.playerAsset.Iterators.CommandIterator;
import models.playerAsset.Assets.*;

import java.util.HashMap;

class MessageGenerator implements KeyPressListener{

    protected AssetIterator assetIterator;
    protected CommandIterator cmdIterator;

    private KeyboardController receiver;

    MessageGenerator(KeyboardController receiver, KeyPressInformer keyInformer, AssetIterator assIter, CommandIterator cmdIter){
        this.assetIterator = assIter;               //Set up the asset iterator
        this.cmdIterator = cmdIter;                 //Set up the command iterator
        this.receiver = receiver;                   //Set up who will receive Commands once they're generated
        keyInformer.registerClient(this);    //Register self to get keypress notifications from the keyInformer
        assetIterator.first();
    }

    private void generateMessage(){
        //Sends receiver a message as generated by the current Mode
        PlayerAsset pa = (PlayerAsset)assetIterator.getElement();;
        String disMsg = "[" + pa.getID() + "]\t(" + pa.toString() + ")";
        receiver.handleMsg(disMsg);
    }

    @Override //Listen to notifications from a KeyPressInformer
    public void updateKeysPressed(HashMap<String, Boolean> kp) {
        interpretKeystrokes(kp);
    }

    private void interpretKeystrokes(HashMap<String, Boolean> keystrokes){
        //System.out.println(keystrokes);
        if(keystrokes.get("ENTER")){
            //generateMessage();

            //DEV:
            String MSG = "";
            String assetType = assetIterator.getElement().getClass().getGenericSuperclass().toString();
            String mode = assetType.substring(assetType.lastIndexOf(".")+1);

            MSG += "{Mode: " + mode + ", ";
            MSG += "AssetID: " + ((PlayerAsset)assetIterator.getElement()).getID() + ", ";
            MSG += "Command: ";
            System.out.println(MSG);
        }

        /* Keypress combinations with CONTROL+[some key] cycle MODE or TYPE */
        if(keystrokes.get("CONTROL")){

            /* CONTROL+{UP/DOWN}: Cycle MODE */
            if(keystrokes.get("UP")){
                assetIterator.prevMode();           //CONTROL+UP: Previous Mode
            } else if(keystrokes.get("DOWN")){
                assetIterator.nextMode();           //CONTROL+DOWN: Next Mode
            }

            /* CONTROL+{LEFT/RIGHT}: Cycle TYPE */
            else if(keystrokes.get("LEFT")){        //CONTROL+LEFT: Previous Type
                assetIterator.prevType();
            } else if(keystrokes.get("RIGHT")){     //CONTROL+RIGHT: Next Type
                assetIterator.nextType();
            }

        }

        /* Keypresses without control cycle TYPE INSTANCES and COMMANDS */
        else {

            //LEFT/RIGHT: Cycle Type Instances
            if(keystrokes.get("LEFT")){
                assetIterator.prev();
            } else if(keystrokes.get("RIGHT")){
                assetIterator.next();
            }

            /* UP/DOWN: Cycle Commands */
            else if(keystrokes.get("UP")){               /* Previous command */
                //TODO: Implement Commands iterator
            } else if(keystrokes.get("DOWN")){      /* Next command */
                //TODO: Implement Commands iterator
            }
        }
    }

    //Gets called when player turn switches. Changes the iterator on hand.
    protected void updateIterator(AssetIterator assetIterator){
        this.assetIterator = assetIterator;
    }

}
